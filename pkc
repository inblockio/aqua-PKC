#!/usr/bin/env bash


#TODO replace with ids insted of container-names
DATABASE_CONTAINER_NAME=micro-pkc-database

set -e

if [ "$EUID" -eq 0 ]; then
    echo "Please don't run as root."
    exit 1
fi

# For output coloring
LIGHT_GREEN='\033[0;32m'
NC='\033[0m' # No Color

usage() {
    cat <<'EOF'
Usage:
  pkc <command>

Options:
  --help
Commands:
  setup     Setup the system for the first time and then run the system
  stop      Gracefully stop the system
  start     Resume running the system from a stopped state
  backup    Run the system backup
  restore   Run the system restore from backup
  nuke      Destroy containers and delete backup data
EOF
}

usage_setup() {
    cat <<'EOF'
Usage:
  pkc setup [OPTIONS]

Set up a PKC instance for the first time.

Options:
  -w, --wallet-address <your crypto wallet address>
  -s, --server         <your server name; defaults to http://localhost:9352>
  --private             disable anonymous page read
  --web-public          expect --server <mediawiki.domain> --siweoidc-server <siwe.domain> --le-email <your@email.com>
  --empty-wiki          setup without default wiki content
  --disable-autobackup  disable MediaWiki auto backup service
EOF
}

check_wallet_address() {
    if [ -z "$WALLET_ADDRESS" ]; then
        echo "Error: you must specify the wallet address."
        usage_setup
        exit 1
    fi

    # https://ethereum.stackexchange.com/questions/1374/how-can-i-check-if-an-ethereum-address-is-valid
    # TODO make this address validation more comprehensive.
    if [[ ! "$WALLET_ADDRESS" =~ ^(0x)?[0-9a-fA-F]{40}$ ]]; then
        echo "Error: Your wallet address is not a valid Ethereum address."
        exit 1
    fi
}

check_dependencies() {
    local initsys

    # Check Docker installation
    if ! which docker; then
        echo "Error: Docker is not yet installed. Aborting PKC installation." >&2
        exit 1
    fi

    # Check docker-compose installation
    if ! which docker-compose; then
        echo "Error: docker-compose is not yet installed. Aborting PKC installation." >&2
        exit 1
    fi

    # Check git installation
    if ! which git; then
        echo "Error: Git is not yet installed. Aborting PKC installation." >&2
        exit 1
    fi

    if ! docker info; then
        echo "Docker not running, please start it."
        initsys=$(ps 1 | head -n 2 | tail -n 1 | awk '{print $5}')
        if [[ $initsys == *"systemd"* ]]; then
            echo "systemd init system detected, start docker using:"
            echo "$ systemctl start docker.service"
        elif [[ $initsys == *"launchd"* ]]; then
            echo "launchd init system detected, start docker using:"
            echo "$ open /Applications/Docker.app"
        else
            echo "different init system than systemd or launchd, you're on your own"
        fi
        echo "If docker is started and the script still fails, please add your user to the docker group to be able to command docker without super-user privileges:"
        echo "# usermod -aG docker ${USER}"
        echo "Restart user-sessio afterwards to apply changes."
        exit 1
    fi
}

ensure_submodules() {
    # Ensure submodule dependencies are downloaded
    mkdir -p mountPoint/extensions

    # Ensure MediaWiki_Backup repo exists
    if [ ! -d aqua/MediaWiki_Backup ]; then
        echo "MediaWiki_Backup repo doesn't exist. Downloading..."
        git clone https://github.com/inblockio/MediaWiki_Backup.git aqua/MediaWiki_Backup
    else
        echo "Updating MediaWiki_Backup repo..."
        git -C aqua/MediaWiki_Backup pull
    fi
    ln -sf "$PWD/aqua/MediaWiki_Backup" mountPoint/MediaWiki_Backup

    # Download latest PKC-Content repo
    git submodule update --init --recursive --remote
}

validate_web_public_detail() {
    local pkc_server=$1
    local siweoidc_server=$2
    local letsencrypt_email=$3
    if [ -z "$pkc_server" ]; then
        echo "Error: You specified '--web-public' but didn't specify the MediaWiki server via '--server'"
        exit 1
    fi
    if [[ "$pkc_server" == *"https:"* ]]; then
        echo "Error: Your MediaWiki server must not contain the https scheme"
        exit 1
    fi
    if [ -z "$siweoidc_server" ]; then
        echo "Error: You specified '--web-public' but didn't specify the SIWE OIDC server via '--siweoidc-server'"
        exit 1
    fi
    if [[ "$siweoidc_server" == *"https:"* ]]; then
        echo "Error: Your SIWE OIDC server must not contain the https scheme"
        exit 1
    fi
    if [ -z "$letsencrypt_email" ]; then
        echo "Error: You specified '--web-public' but didn't specify the Let's Encrypt email via '--le-email'"
        exit 1
    fi
}

setup_proxy_server() {
    echo "Setting up Nginx proxy server with Let's Encrypt"
    docker-compose -f proxy_server/docker-compose.yml up -d
    echo "Ensuring that the Nginx server allows 100 MB file upload"
    # See https://github.com/nginx-proxy/nginx-proxy/issues/981#issuecomment-345434827
    docker exec proxy_server_proxy_1 sh -c 'echo "client_max_body_size 100M;" > /etc/nginx/conf.d/custom_proxy_settings.conf'
    docker-compose -f proxy_server/docker-compose.yml restart proxy
    echo "Sleeping for 3s 💤 💤"
    sleep 3
    echo "Proxy setup done!"
}

prepare_web_public() {
    local pkc_server=$1
    local siweoidc_server=$2
    local letsencrypt_email=$3
    setup_proxy_server
    echo "Applying your domain details"
    sed -i "s|MEDIAWIKI_HOST=.*|MEDIAWIKI_HOST=$pkc_server|" .env
    sed -i "s|SIWEOIDC_HOST=.*|SIWEOIDC_HOST=$siweoidc_server|" .env
    sed -i "s/LETSENCRYPT_EMAIL=.*/LETSENCRYPT_EMAIL=$letsencrypt_email/" .env
}

prepare_dotenv() {
    echo '# This file is autogenerated by <pkc setup>' > .env
    cat .env.template >> .env
}

do_docker_compose_up_maybe_backup() {
    if [ "$web_public" = true ]; then
      docker-compose -f docker-compose-web.yml pull
      docker-compose -f docker-compose-web.yml up -d
    else
      docker-compose -f docker-compose-local.yml pull
      docker-compose -f docker-compose-local.yml up -d
    fi
    if [ -f .autobackup ]; then
        echo "Starting cron for auto-backup"
        docker exec micro-pkc-mediawiki service cron start
    fi
}

check_negative_software() {
  if which sestatus; then
    echo "Warn: SELinux is installed! Sometimes SELinux blocks the mount points, causing MediaWiki and MariaDB to not start!!!"
  fi
}

run_setup() {
    local web_public=false
    local enable_autobackup=false
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--help)
                usage_setup
                exit 0
                ;;
            -w|--wallet-address)
                WALLET_ADDRESS="$2"
                shift
                shift
                ;;
            -s|--server)
                PKC_SERVER="$2"
                shift
                shift
                ;;
            --siweoidc-server)
                SIWEOIDC_SERVER="$2"
                shift
                shift
                ;;
            --le-email)
                LETSENCRYPT_EMAIL="$2"
                shift
                shift
                ;;
            --empty-wiki)
                empty_wiki=true
                shift
                ;;
            --private)
                private=true
                shift
                ;;
            --web-public)
                web_public=true
                shift
                ;;
            --enable-autobackup)
                enable_autobackup=true
                shift
                ;;
            *)    # unknown option
                usage_setup
                exit 0
                ;;
        esac
    done

    check_negative_software
    check_dependencies
    check_wallet_address
    prepare_dotenv

    # We persists the option of whether auto-backup is enabled or not in .autobackup.
    # TODO: use .env instead
    if [ "$enable_autobackup" = true ]; then
        touch .autobackup
    else
        rm -f .autobackup
    fi

    if [ "$web_public" = true ]; then
        validate_web_public_detail "$PKC_SERVER" "$SIWEOIDC_SERVER" "$LETSENCRYPT_EMAIL"
        echo "MediaWiki server name: $PKC_SERVER"
        echo "SIWE OIDC server name: $SIWEOIDC_SERVER"
        echo "Let's Encrypt email: $LETSENCRYPT_EMAIL"
        prepare_web_public "$PKC_SERVER" "$SIWEOIDC_SERVER" "$LETSENCRYPT_EMAIL"
        # Add https:// scheme
        PKC_SERVER="https://$PKC_SERVER"
        SIWEOIDC_SERVER="https://$SIWEOIDC_SERVER"
    else
        if [ -z "$PKC_SERVER" ]; then
            PKC_SERVER=http://localhost:9352
        fi
		if [ -z "$SIWEOIDC_SERVER" ];  then
			SIWEOIDC_SERVER=http://localhost:9353
		fi
        echo "Server name: $PKC_SERVER"
		echo "SIWE server: $SIWEOIDC_SERVER"
    fi

    # Convert wallet address to lower case
    # This is because the address returned in Metamask API is in lower case
    # WALLET_ADDRESS=$(echo "$WALLET_ADDRESS" | tr "\[A-Z\]" "\[a-z\]")

    ensure_submodules

    echo "Specifying the server name into SIWE OIDC"
    # use perl to account for cross-OS limitations of sed
    # https://stackoverflow.com/questions/4247068/sed-command-with-i-option-failing-on-mac-but-works-on-linux/14813278#14813278
    perl -i -p -e "s|PKC_SERVER|$PKC_SERVER|" .env
	perl -i -p -e "s|SIWEOIDC_SERVER|$SIWEOIDC_SERVER|" .env

    echo "Executing docker-compose up -d. Be prepared to type your password."
    # Support version 1 / 2 of docker-compose
    do_docker_compose_up_maybe_backup
    # Sleep; just to be sure that the container has initialized well.

    counter=0

    until [ $counter -gt 5 ]
    do
      if [[ $(docker ps -f health=healthy -f name=$DATABASE_CONTAINER_NAME --format=json) ]]; then
        echo "Database up!"
        break
      fi
      echo "Waiting for database to be available..."
      ((counter=counter+1))
      sleep 5
    done

    echo "Installing MediaWiki"
    # TODO split failure cases and remove || true
    docker exec micro-pkc-mediawiki ./aqua/install_pkc.sh \
                        --wallet-address "$WALLET_ADDRESS" \
                        --pkc-server "$PKC_SERVER" \
                        --siweoidc-server "$SIWEOIDC_SERVER" \
                        ${empty_wiki:+--empty-wiki} \
                        ${private:+--private} || true

    # We always download the favicon fresh, so that it is always up to date.
    echo "Downloading browser favicon"


if [[ ! $empty_wiki ]]; then
    echo "Importing Aqua-Chains from import folder ..."
    # Import Aqua-Chains as JSON (The pages which should be imported must be stored in the ./import directory)
    ./scripts/push_pages.sh
    # Import Aqua-Chains as JSON bypassing the inbox (The pages which should be imported must be stored in the ./import_direct directory)
    ./scripts/push_pages_directly.sh
fi

    # Setting a timeout for the curl command and redirecting stderr to stdout to handle both output and error
    if timeout 15 docker exec micro-pkc-mediawiki bash -c "curl https://raw.githubusercontent.com/inblockio/aqua-branding/main/logos/aqua-white-1024x1024-32x32.png -o favicon.ico 2>&1"; then
        echo "Download favicon successful."
    else
        # This block executes if curl fails due to timeout or any other reason
        case $? in
            124) echo "Favicon download failed after 15 seconds (time out)." ;;
            *) echo "The command failed for a different reason." ;;
        esac
    fi

    # Prepare auto backup
    if [ "$enable_autobackup" = true ]; then
        echo "to enable backups, we need to write to mountPoint which needs super-user privileges:"
        echo "> sudo cp aqua/do_backup_wrapper.sh mountPoint/backup"
        sudo cp aqua/do_backup_wrapper.sh mountPoint/backup
        echo "Enabling auto-backup every 30 minutes"
        docker exec micro-pkc-mediawiki sh -c '(echo "*/30 * * * * /backup/do_backup_wrapper.sh") | sort - | uniq - | crontab -'
    else
        echo "Note: auto-backup is disabled"
    fi

    echo "Done!"
    echo "Visit $PKC_SERVER to access your PKC instance."
}

stop_container() {
  #check if proxy_server_net network exists. if true = web_public
  local env_existed
  env_existed=false
  if test -f .env; then
    env_existed=true
  else
    cp .env.template .env
  fi
  if [[ $(docker network ls | grep proxy_server_net ) ]]; then
    docker-compose -f docker-compose-web.yml down
#    proxy only runs in web deployment
    docker-compose -f proxy_server/docker-compose.yml down
  else
    docker-compose -f docker-compose-local.yml down
  fi
  if [ "$env_existed" = false ]; then
    rm .env
  fi
}

restore_all() {
    archive_file=$1
    # Extract tarball and restore images
    docker exec -it micro-pkc-mediawiki /MediaWiki_Backup/extract_and_restore_images.sh -a "/backup/$archive_file" -w /var/www/html
    # Restore database
    docker exec -it micro-pkc-database /MediaWiki_Backup/restore_database.sh /backup/database.sql.gz
    # Clean up database sql file
    docker exec -it micro-pkc-database rm /backup/database.sql.gz
    # Toggle read-only off
    docker exec -it micro-pkc-mediawiki /MediaWiki_Backup/toggle_read_only_off.sh /var/www/html
}

if [ $# -eq 0 ]; then
    # If no argument is provided, provide info and exit early.
    usage
    exit 0
fi

# We don't use getopt because we want to support running micro-pkc on macOS.
# macOS has getopt, but it doesn't have `long` option
# See https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
# https://unix.stackexchange.com/questions/520028/parsing-arguments-with-nested-case-statements
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            usage
            exit 0
            ;;
        setup)
            shift
            run_setup "$@"
            break
            ;;
        stop)
            stop_container
            break
            ;;
        start)
            do_docker_compose_up_maybe_backup
            break
            ;;
        backup)
            docker exec micro-pkc-mediawiki /MediaWiki_Backup/backup.sh \
                    -p "$(date -u +"%Y-%m-%dT%H-%M-%S_UTC")" -d /backup -w /var/www/html -s -f
            echo -e "${LIGHT_GREEN}Done! Your backup is located in ./mountPoint/backup.${NC}"
            break
            ;;
        restore)
            most_recent=$(ls -t mountPoint/backup/*.tar.gz | head -n 1 | xargs basename)
            restore_all "$most_recent"
            # A reset is required to flush outdated cache from the system.
            docker-compose stop
            do_docker_compose_up_maybe_backup
            break
            ;;
        nuke)
            # Check we are in the aqua-PKC repository
            current_repository=$(git config --get remote.origin.url)
            if [[ "$current_repository" != *"aqua-PKC"* ]]; then
                echo "pkc nuke must be run from the aqua-PKC directory. Aborting..."
                exit 1
            fi
            read -r -p $'Destroying containers and deleting backup data. \n\tAre you sure? 😱 [y/N] ' response
            case "$response" in
                [yY][eE][sS]|[yY])
                    echo "💥💥💥💥 Kaaboooom!!!💥💥💥💥"
                    set -x
                    stop_container
                    set +x
                    if [ -d mountPoint ]; then
                        echo "mountPoint which contains all the files is actually only writable with elevated privileges, as such you will need to enter your password for sudo here."
                        echo "> sudo rm -r mountPoint"
                        sudo rm -r mountPoint
                    fi
                    echo "🏜️ It's all gone 🏜️"
                    ;;
                *)
                    echo "Aborting..."
                    exit 0
                    ;;
            esac
            break
            ;;
        *)    # unknown option
            usage
            exit 0
            ;;
    esac
done
